name: Create demo repository

on:
  workflow_call:
    inputs:
      user_name:
        description: The name of the user who created the repository
        type: string
        required: true
      organization_name:
        description: The name of the target organization
        type: string
        required: true
      repository_name:
        description: The name of the template repository
        type: string
        required: true
    secrets:
      APP_ID:
        description: 'GitHub App ID'
        required: true
      APP_SECRET:
        description: 'GitHub App key'
        required: true
  workflow_dispatch:
    inputs:
      user_name:
        description: The name of the user who created the repository
        type: string
        required: true
        default: msanzdelrio
      organization_name:
        description: The name of the target organization
        type: string
        required: true
        default: margaritasdr
      repository_name:
        description: The name of the template repository
        type: string
        required: true 
        default: tmpl-workflows-100 

jobs:
  create_demo:
    name: Create Demo Repository and Resources
    runs-on: ubuntu-20.04
    steps:

      - name: Get Token for checkout origin organization
        id: get_workflow_token_origin
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.APP_ID }}
          application_private_key: ${{ secrets.APP_SECRET }}
          organization: msanzdelrio-demo-resources

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Checkout template Repository
        uses: actions/checkout@v3
        with:
          repository: msanzdelrio-demo-resources/${{ inputs.repository_name }}
          ref: main
          token: ${{ steps.get_workflow_token_origin.outputs.token }}
          persist-credentials: false
          path: template

      - name: Get Token for checkout target organizatiom
        id: get_workflow_token_target
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.APP_ID }}
          application_private_key: ${{ secrets.APP_SECRET }}
          organization: ${{ inputs.organization_name }}

      - name: Create target repository
        id: create_repository
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_workflow_token_target.outputs.token }}
          script: |
            github.rest.repos.createInOrg({
              org: '${{ inputs.organization_name }}',
              name: '${{ inputs.repository_name }}-${{ inputs.user_name }}',
            });

      - name: Push repository changes
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token_target.outputs.token }}
          repository: ${{ inputs.repository_name }}-${{ inputs.user_name }}
        run: |
          git config --global init.defaultBranch main
          git config --global user.email "msanzdelrio@github.com"
          git config --global user.name "Octobot"
          git clone https://${{ secrets.APP_ID }}:${{ env.GITHUB_TOKEN }}@github.com/${{ inputs.organization_name }}/${{ env.repository }}.git
          cp -r ./template/** ./${{ env.repository }}
          cp -r ./template/.github/** ./${{ env.repository }}/.github/
          cd ./${{ env.repository }}
          rm -rf ./.git/
          git init
          git remote add origin https://${{ secrets.APP_ID }}:${{ env.GITHUB_TOKEN }}@github.com/${{ inputs.organization_name }}/${{ env.repository }}.git
          git add .
          git commit -m "initial commit"
          git branch -M main
          git push -u origin main

      - name: Create target repository secret
        id: create_repository_secret
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.get_workflow_token_target.outputs.token }}
          script: |
            const sodium = require('libsodium-wrappers')
            
            const secret = '${{ secrets.APP_ID }}'
            github.rest.actions.getRepoPublicKey({
              owner: '${{ inputs.organization_name }}', 
              repo: '${{ inputs.repository_name }}, 
            }).then(({ data }) => {
              const key = data.key;
              const keyId = data.key_id;
              
              //Check if libsodium is ready and then proceed.
              sodium.ready.then(() => {
                // Convert Secret & Base64 key to Uint8Array.
                let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
                let binsec = sodium.from_string(secret)

                //Encrypt the secret using LibSodium
                let encBytes = sodium.crypto_box_seal(binsec, binkey)

                // Convert encrypted Uint8Array to Base64
                let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)

                github.rest.actions.createOrUpdateRepoSecret({ 
                  owner: '${{ inputs.organization_name }}', 
                  repo: '${{ inputs.repository_name }}, 
                  secret_name: 'APP_ID',
                  encrypted_value: output,
                  key_id: keyId
                })
              });
            });

            
            
            
